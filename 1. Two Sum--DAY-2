//Brute Force solution
class Solution {
    public int[] twoSum(int[] nums, int target) {
    
        for (int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                int comp=target-nums[i];
                if(nums[j]==comp)
                    return new int[] {i,j};
            }
        }
        return new int[] {0,0};
    }
}

//Optimised solution 1
class Solution {
    public int[] twoSum(int[] nums, int target) {
    
        Map<Integer,Integer> map = new HashMap<>();
        for (int i=0;i<nums.length;i++)
        {
            int comp=target-nums[i];
            
            if(map.containsKey(comp))
                return new int[] {map.get(comp),i};
            
            map.put(nums[i],i);
        }
        return new int[] {0,0};
    }
}

//Optimised solution 2
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] res=new int[2];
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            if(map.containsKey(target-nums[i]))
            {
                res[0]=map.get(target-nums[i]);
                res[1]=i;
                return res;
            }
            map.put(nums[i],i);
        }
        return res;
    }
}
